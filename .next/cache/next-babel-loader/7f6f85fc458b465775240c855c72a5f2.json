{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ollep\\\\Documents\\\\clickmeguy\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Characters from '../Characters.json';\nimport Layout from '../components/Layout';\nimport CharCard from '../components/CharCard';\nimport GridComp from '../components/GridComp/';\nimport PaperComp from '../components/PaperComp/';\nimport Alert from '../components/Alert/';\nimport Score from '../components/Score/';\n\nconst index = props => {\n  // console.log(props)\n  // CHARCTERS ARRAY\n  const {\n    0: character,\n    1: setCharacters\n  } = useState(Characters);\n  console.log(character); // SCORE\n\n  const {\n    0: score,\n    1: setScore\n  } = useState(0);\n  console.log(score); // ALERT MESSAGE\n\n  const {\n    0: alert,\n    1: setAlert\n  } = useState('');\n  console.log(alert); // METHODS\n\n  const handlePicked = e => {\n    const name = e.target.attributes.getNamedItem('name').value;\n    console.log(name);\n    shuffleCharacters(); //checkGuess takes a name variable that will be used as a JSX prop to the CharCard component\n    // second arg acts as a ...\n\n    checkGuess(name, updateTopScore);\n  };\n\n  const updateTopScore = currentScore => {\n    setScore(currentScore + 1);\n  }; // * calledback from handlePicked\n\n\n  const checkGuess = (name, cb) => {\n    console.log(name);\n    console.log(cb);\n  }; // * calledback from handlePicked\n\n\n  const shuffleCharacters = () => {\n    setCharacters(shuffleArray(character));\n    console.log('STATE');\n    console.log(character); // ** characters shuffle but pics dont shuffle as the data does...\n\n    console.log('JSON');\n    console.log(Characters);\n  }; // * callback from shuffleCharacters\n\n\n  const shuffleArray = arr => {\n    let j, x, i;\n\n    for (i = arr.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = arr[i];\n      arr[i] = arr[j];\n      arr[j] = x;\n    }\n\n    return arr;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    container: true,\n    direction: \"column\",\n    style: {\n      mrgin: \"0 auto\",\n      maxWidth: 945\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    item: true,\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(PaperComp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, alert === \"Good Choice!\" ? __jsx(Alert, {\n    message: alert,\n    style: {\n      color: 'green'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : __jsx(Alert, {\n    message: alert,\n    style: {\n      color: 'blue'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }))), __jsx(GridComp, {\n    container: true,\n    justify: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    item: true,\n    lg: 6,\n    md: 6,\n    sm: 12,\n    xs: 12,\n    style: {\n      padingLeft: '100px',\n      marginLeft: \"101.8px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(PaperComp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(Score, {\n    type: \"Score To Win\",\n    Score: character.length,\n    currentScore: score,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }))))), __jsx(GridComp, {\n    container: true,\n    spacing: 8,\n    justify: \"center\",\n    style: {\n      maxWidth: 945,\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, character.map(char => __jsx(CharCard, {\n    id: char.id,\n    key: char.id,\n    name: char.name,\n    image: char.image,\n    handlePicked: handlePicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })))));\n};\n\nexport default index;","map":{"version":3,"sources":["C:/Users/ollep/Documents/clickmeguy/pages/index.js"],"names":["useState","Characters","Layout","CharCard","GridComp","PaperComp","Alert","Score","index","props","character","setCharacters","console","log","score","setScore","alert","setAlert","handlePicked","e","name","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","currentScore","cb","shuffleArray","arr","j","x","i","length","Math","floor","random","mrgin","maxWidth","color","padingLeft","marginLeft","margin","map","char","id","image"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport Characters from '../Characters.json'\r\n\r\nimport Layout from '../components/Layout'\r\nimport CharCard from '../components/CharCard'\r\nimport GridComp from '../components/GridComp/'\r\nimport PaperComp from '../components/PaperComp/'\r\nimport Alert from '../components/Alert/'\r\nimport Score from '../components/Score/'\r\n\r\n\r\nconst index = (props) => {\r\n    // console.log(props)\r\n    // CHARCTERS ARRAY\r\n    const [character, setCharacters] = useState(Characters)\r\n    console.log(character)\r\n    // SCORE\r\n    const [score, setScore] = useState(0);\r\n    console.log(score)\r\n    // ALERT MESSAGE\r\n    const [alert, setAlert] = useState('');\r\n    console.log(alert)\r\n\r\n    // METHODS\r\n    const handlePicked = e => {\r\n        const name = e.target.attributes.getNamedItem('name').value;\r\n        console.log(name)\r\n        shuffleCharacters()\r\n        //checkGuess takes a name variable that will be used as a JSX prop to the CharCard component\r\n        // second arg acts as a ...\r\n        checkGuess(name, updateTopScore)\r\n    }\r\n    const updateTopScore = (currentScore) => {\r\n       \r\n        setScore(currentScore+1)\r\n    }\r\n\r\n    // * calledback from handlePicked\r\n    const checkGuess = (name, cb) => {\r\n        console.log(name)\r\n        console.log(cb)\r\n    }\r\n    // * calledback from handlePicked\r\n    const shuffleCharacters = () => {\r\n        setCharacters(shuffleArray(character))\r\n        console.log('STATE')\r\n        console.log(character)\r\n        // ** characters shuffle but pics dont shuffle as the data does...\r\n        console.log('JSON')\r\n        console.log(Characters)\r\n    }\r\n    // * callback from shuffleCharacters\r\n    const shuffleArray = arr => {\r\n        let j, x, i;\r\n        for (i = arr.length - 1; i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            x = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = x;\r\n        }\r\n        return arr\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Layout>\r\n                <GridComp \r\n                    container \r\n                    direction='column' \r\n                    style={{ mrgin: \"0 auto\", maxWidth: 945 }}>\r\n                        <GridComp item lg={12}>\r\n                            <PaperComp>\r\n                                {alert === \"Good Choice!\" ? (\r\n                                    <Alert message={alert} style={{ color: 'green' }} />\r\n                                ) : (\r\n                                        <Alert message={alert} style={{ color: 'blue' }} />\r\n                                    )}\r\n                            </PaperComp>\r\n                        </GridComp>\r\n\r\n                    <GridComp \r\n                        container \r\n                        justify=\"space-between\">\r\n                        <GridComp \r\n                            item \r\n                                lg={6} \r\n                                md={6} \r\n                                sm={12} \r\n                                xs={12} \r\n                            style={{ padingLeft: '100px', marginLeft: \"101.8px\" }}>\r\n                            <PaperComp>\r\n                                <Score type=\"Score To Win\" Score={character.length} currentScore={score} />\r\n                            </PaperComp>\r\n                        </GridComp>\r\n                    </GridComp>\r\n                </GridComp>\r\n\r\n                <GridComp container spacing={8} justify='center' style={{ maxWidth: 945, margin: '0 auto' }}>\r\n                    {character.map(char => (\r\n                        <CharCard\r\n                            id={char.id}\r\n                            key={char.id}\r\n                            name={char.name}\r\n                            image={char.image}\r\n                            handlePicked={handlePicked}\r\n                        />\r\n                    ))}\r\n                </GridComp>\r\n            </Layout>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default index"]},"metadata":{},"sourceType":"module"}