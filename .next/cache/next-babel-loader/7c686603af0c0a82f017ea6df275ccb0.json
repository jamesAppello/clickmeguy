{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\ollep\\\\Documents\\\\clickmeguy\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { useState } from 'react'\nimport Characters from '../Characters.json';\nimport Layout from '../components/Layout';\nimport CharCard from '../components/CharCard';\nimport GridComp from '../components/GridComp/';\nimport PaperComp from '../components/PaperComp/';\nimport Alert from '../components/Alert/';\nimport Score from '../components/Score/';\nimport GifCard from '../components/GifCard/GifCard.js';\nconsole.log(Layout.props.testProp.gifs);\nvar GIFS = Layout.props.testProp.gifs;\n\nvar index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(index, _React$Component);\n\n  function index() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(index)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      charGifs: [],\n      characters: Characters,\n      pickedChars: [],\n      topScore: 0,\n      alertMessage: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePicked\", function (e) {\n      // storing name attribute and its value to its charCard in a const variable\n      var name = e.target.attributes.getNamedItem(\"name\").value; // cb >> shuffleCharacter 'function'\n\n      _this.shuffleCharacters(); // cb >> check guess takes 'name variable' holding the data value for the given card handling ...\n      // ... >>> second parameter for checkGuess is a method that is used as a ...\n      // ... >>> callback in the checkguess function denoted >> 'cb'\n\n\n      _this.checkGuess(name, _this.updateTopScore);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTopScore\", function (currentState) {\n      switch (currentState) {\n        case _this.checkGuess = false:\n          _this.setState(_this.state.topScore + 1);\n\n          if (_this.state.topScore >= 12) {\n            _this.setState(_this.state.topScore = 0);\n          }\n\n          break;\n\n        case _this.checkGuess = true:\n          _this.setState(_this.state.topScore = 0);\n\n          break;\n      } // console.log(this.state);\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"shuffleCharacters\", function () {\n      _this.setState(_this.state.characters = _this.shuffleArray(_this.state.characters));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"shuffleArray\", function (arr) {\n      var j, x, i;\n\n      for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = arr[i];\n        arr[i] = arr[j];\n        arr[j] = x;\n      }\n\n      return arr;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkGuess\", function (name, cb) {\n      var newState = _objectSpread({}, _this.state);\n\n      if (newState.pickedChars.includes(name)) {\n        newState.alertMessage = \"YOU ALREADY PICKED \\\"\".concat(name.toUpperCase(), \"\\\" TRY AGAIN!!!\");\n        newState.pickedChars = [];\n\n        _this.setState(_this.state = newState); // console.log(newState);\n\n      } else {\n        newState.pickedChars.push(name);\n        newState.alertMessage = \"GOOD CHOICE!!!\"; // * \\/\\/~ THIS CHANGES THE TOP SCORE ~\\/\\/ *\n        // ***** put and if-statement for each run thru if the choice is wrong then the state is held to the top score!\n        // newState.topScore++;\n        // *INSERT* cb to a function to control the topscore\n\n        _this.setState(_this.state = newState); // console.log(newState);\n\n      } //cb(newState, this.alertWinner);\n\n\n      _this.alertWinner(newState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"alertWinner\", function (newState) {\n      if (newState.pickedChars.length === 12) {\n        newState.alertMessage = alert(\"CONGRADULATIONS! YOU WON!\"); //newState.pickedChars = [];\n\n        _this.setState(_this.state = newState);\n      } else {}\n    });\n\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var layout = Layout.props.testProp.gifs;\n      var newArr = [];\n      newArr.push(layout);\n      console.log(newArr);\n      this.setState({\n        charGifs: newArr\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.state.charGifs[0])\n      var GIFDATA = this.state.charGifs[0];\n      console.log(GIFDATA.splice([0]));\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, __jsx(Layout, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), __jsx(GridComp, {\n        container: true,\n        direction: \"column\",\n        style: {\n          margin: \"0 auto\",\n          maxWidth: 945,\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, __jsx(GridComp, {\n        item: true,\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, __jsx(PaperComp, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.state.alertMessage === \"GOOD CHOICE!\" ? __jsx(Alert, {\n        message: this.state.alertMessage,\n        style: {\n          color: \"green\",\n          fontWeight: \"bolder\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }) : __jsx(Alert, {\n        message: this.state.alertMessage,\n        style: {\n          color: \"blue\",\n          fontWeight: \"bolder\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }))), __jsx(GridComp, {\n        container: true,\n        justify: \"space-between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, __jsx(GridComp, {\n        item: true,\n        lg: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        style: {\n          paddingLeft: \"100px\",\n          marginLeft: \"161.8px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, __jsx(PaperComp, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, __jsx(Score, {\n        type: \"Current Score\",\n        score: this.state.pickedChars.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }))))), __jsx(GridComp, {\n        container: true,\n        spacing: 6,\n        justify: \"center\",\n        style: {\n          maxWidth: 945,\n          margin: \"0 auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, this.state.characters.map(function (_char) {\n        return __jsx(GridComp, {\n          item: true,\n          lg: 3,\n          md: 3,\n          sm: 4,\n          xs: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, __jsx(CharCard, {\n          id: _char.id,\n          name: _char.name,\n          image: _char.image,\n          key: _char.id,\n          handlePicked: _this2.handlePicked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }));\n      }))));\n    }\n  }]);\n\n  return index;\n}(React.Component);\n\nexport default index; // const index = (props) => {\n//     // console.log(props)\n//     // CHARCTERS ARRAY\n//     const [character, setCharacters] = useState(Characters)\n//     // console.log(character)\n//     // SCORE\n//     const [score, setScore] = useState(0);\n//     // console.log(score)\n//     // ALERT MESSAGE\n//     const [alert, setAlert] = useState('');\n//     // console.log(alert)\n//     // METHODS\n//     const handlePicked = e => {\n//         const name = e.target.attributes.getNamedItem('name').value;\n//         console.log(name)\n//         shuffleCharacters()\n//         //checkGuess takes a name variable that will be used as a JSX prop to the CharCard component\n//         // second arg acts as a ...\n//         checkGuess(name, updateTopScore)\n//         updateTopScore()\n//     }\n//     const updateTopScore = () => {\n//       console.log(score)\n//       setScore(score+1)\n//       console.log(score)\n//     }\n//     // * calledback from handlePicked\n//     const checkGuess = (name, cb) => {\n//         const newState = [...character]\n//         console.log(newState)\n//         // setAlert(`you picked ${name}`)\n//         if (newState.includes(name)) {\n//             setAlert(`You already selected ${name.toUpperCase()}!!`)\n//             newState = []\n//             setCharacters(newState)\n//         } else {\n//             newState.push(name)\n//             setAlert(\"good choice!\")\n//         }\n//         // console.log(name)\n//         // console.log(cb)\n//         alertWinner()\n//     }\n//     console.log(alert)\n//     const alertWinner = () => {\n//         if (score === 12) {\n//             setAlert('holy shit you won!!')\n//         }\n//     }\n//     // * calledback from handlePicked\n//     const shuffleCharacters = () => {\n//         setCharacters(shuffleArray(character))\n//         console.log('STATE')\n//         console.log(character)\n//         // ** characters shuffle but pics dont shuffle as the data does...\n//         console.log('JSON')\n//         console.log(Characters)\n//     }\n//     // * callback from shuffleCharacters\n//     const shuffleArray = arr => {\n//         let j, x, i;\n//         for (i = arr.length - 1; i > 0; i--) {\n//             j = Math.floor(Math.random() * (i + 1));\n//             x = arr[i];\n//             arr[i] = arr[j];\n//             arr[j] = x;\n//         }\n//         return arr\n//     }\n//     return (\n//         <>\n//             <Layout>\n//                 <GridComp \n//                     container \n//                     direction='column' \n//                     style={{ mrgin: \"0 auto\", maxWidth: 945 }}>\n//                         <GridComp item lg={12}>\n//                             <PaperComp>\n//                                 {alert === \"Good Choice!\" ? (\n//                                     <Alert message={alert} style={{ color: 'green' }} />\n//                                 ) : (\n//                                         <Alert message={alert} style={{ color: 'blue' }} />\n//                                     )}\n//                             </PaperComp>\n//                         </GridComp>\n//                     <GridComp \n//                         container \n//                         justify=\"space-between\">\n//                         <GridComp \n//                             item \n//                                 lg={6} \n//                                 md={6} \n//                                 sm={12} \n//                                 xs={12} \n//                             style={{ padingLeft: '100px', marginLeft: \"101.8px\" }}>\n//                             <PaperComp>\n//                                 <Score type=\"Score To Win\" Score={character.length} currentScore={score} />\n//                             </PaperComp>\n//                         </GridComp>\n//                     </GridComp>\n//                 </GridComp>\n//                 <GridComp container spacing={8} justify='center' style={{ maxWidth: 945, margin: '0 auto' }}>\n//                     {character.map(char => (\n//                         <CharCard\n//                             id={char.id}\n//                             key={char.id}\n//                             name={char.name}\n//                             image={char.image}\n//                             handlePicked={handlePicked}\n//                         />\n//                     ))}\n//                 </GridComp>\n//             </Layout>\n//         </>\n//     );\n// };\n// export default index","map":{"version":3,"sources":["C:/Users/ollep/Documents/clickmeguy/pages/index.js"],"names":["Characters","Layout","CharCard","GridComp","PaperComp","Alert","Score","GifCard","console","log","props","testProp","gifs","GIFS","index","charGifs","characters","pickedChars","topScore","alertMessage","e","name","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","currentState","setState","state","shuffleArray","arr","j","x","i","length","Math","floor","random","cb","newState","includes","toUpperCase","push","alertWinner","alert","layout","newArr","GIFDATA","splice","margin","maxWidth","textAlign","color","fontWeight","paddingLeft","marginLeft","map","char","id","image","handlePicked","React","Component"],"mappings":"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":["// import { useState } from 'react'\r\nimport Characters from '../Characters.json'\r\n\r\nimport Layout from '../components/Layout'\r\nimport CharCard from '../components/CharCard'\r\nimport GridComp from '../components/GridComp/'\r\nimport PaperComp from '../components/PaperComp/'\r\nimport Alert from '../components/Alert/'\r\nimport Score from '../components/Score/'\r\nimport GifCard from '../components/GifCard/GifCard.js'\r\n\r\nconsole.log(Layout.props.testProp.gifs)\r\nconst GIFS = Layout.props.testProp.gifs\r\n\r\n\r\nclass index extends React.Component {\r\n\r\n    state = {\r\n     charGifs: [], \r\n     characters: Characters,\r\n     pickedChars: [],\r\n     topScore: 0,\r\n     alertMessage: \"\" \r\n    }\r\n    componentDidMount() {\r\n      let layout = Layout.props.testProp.gifs\r\n      const newArr =[]\r\n      newArr.push(layout)\r\n      console.log(newArr)\r\n      this.setState({ charGifs: newArr })\r\n    }\r\n  \r\n    handlePicked = (e) => {\r\n      // storing name attribute and its value to its charCard in a const variable\r\n      const name = e.target.attributes.getNamedItem(\"name\").value;\r\n      // cb >> shuffleCharacter 'function'\r\n      this.shuffleCharacters();\r\n      // cb >> check guess takes 'name variable' holding the data value for the given card handling ...\r\n      // ... >>> second parameter for checkGuess is a method that is used as a ...\r\n      // ... >>> callback in the checkguess function denoted >> 'cb'\r\n      this.checkGuess(name, this.updateTopScore)\r\n    }\r\n    \r\n    \r\n      updateTopScore = (currentState) => {\r\n        switch (currentState) {\r\n          case this.checkGuess = false:\r\n            this.setState(this.state.topScore + 1)\r\n            if (this.state.topScore >= 12) {\r\n              this.setState(this.state.topScore = 0)\r\n            }\r\n            break;\r\n          \r\n          case this.checkGuess = true: \r\n          this.setState(this.state.topScore = 0)\r\n          break;  \r\n        }\r\n        // console.log(this.state);\r\n      }\r\n      \r\n    shuffleCharacters = () => {\r\n      this.setState(this.state.characters = this.shuffleArray(this.state.characters))\r\n    }\r\n  \r\n    shuffleArray = (arr) => {\r\n      var j, x, i;\r\n      for (i = arr.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i +1));\r\n        x = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = x;\r\n      }\r\n      return arr;\r\n    }\r\n  \r\n    checkGuess = (name,cb) => {\r\n      const newState = { ...this.state };\r\n  \r\n      if (newState.pickedChars.includes(name)) {\r\n        newState.alertMessage = `YOU ALREADY PICKED \"${name.toUpperCase()}\" TRY AGAIN!!!`;\r\n        newState.pickedChars = [];\r\n        this.setState(this.state = newState)\r\n        // console.log(newState);\r\n      } else {\r\n        newState.pickedChars.push(name);\r\n        newState.alertMessage = `GOOD CHOICE!!!`;\r\n        // * \\/\\/~ THIS CHANGES THE TOP SCORE ~\\/\\/ *\r\n        // ***** put and if-statement for each run thru if the choice is wrong then the state is held to the top score!\r\n       // newState.topScore++;\r\n       // *INSERT* cb to a function to control the topscore\r\n        this.setState(this.state =newState);\r\n        // console.log(newState);\r\n      } \r\n         \r\n      //cb(newState, this.alertWinner);\r\n      this.alertWinner(newState)\r\n    }\r\n  \r\n    \r\n  \r\n    alertWinner = (newState) => {\r\n      if (newState.pickedChars.length === 12) {\r\n        newState.alertMessage = alert(\"CONGRADULATIONS! YOU WON!\");\r\n        //newState.pickedChars = [];\r\n        this.setState(this.state = newState);\r\n      } else {\r\n\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      // console.log(this.state.charGifs[0])\r\n      const GIFDATA = this.state.charGifs[0]\r\n      console.log(GIFDATA.splice([0]))\r\n      return(\r\n        <div>\r\n            <Layout {...this.props}>\r\n          {/* <NavBar style={{ background: \"#313133\", marginBottom: \"5px\" }} /> */}\r\n          <GridComp container direction=\"column\" style={{ margin: \"0 auto\", maxWidth: 945, textAlign:'center' }}>\r\n          \r\n          <GridComp item lg={12}>\r\n              <PaperComp>\r\n                {this.state.alertMessage === \"GOOD CHOICE!\" ? (\r\n                  <Alert message={this.state.alertMessage} style={{ color: \"green\", fontWeight: \"bolder\" }} />\r\n                ) : (\r\n                    <Alert message={this.state.alertMessage} style={{ color: \"blue\", fontWeight: \"bolder\" }} />\r\n                  )}\r\n              </PaperComp>\r\n            </GridComp>\r\n  \r\n            <GridComp container justify=\"space-between\">\r\n  \r\n              <GridComp item lg={6} md={6} sm={12} xs={12} style={{ paddingLeft: \"100px\", marginLeft: \"161.8px\" }}>\r\n                <PaperComp>\r\n                  <Score type=\"Current Score\" score={this.state.pickedChars.length} />\r\n                </PaperComp>\r\n              </GridComp>\r\n  \r\n              \r\n              \r\n  \r\n            </GridComp>\r\n          </GridComp>\r\n  \r\n          <GridComp container spacing={6} justify=\"center\" style={{ maxWidth: 945, margin: \"0 auto\" }}>\r\n            {this.state.characters.map(char => (\r\n              <GridComp item lg={3} md={3} sm={4} xs={6}>\r\n              <CharCard\r\n                id={char.id}\r\n                name={char.name}\r\n                image={char.image}\r\n                key={char.id}\r\n                handlePicked={this.handlePicked}\r\n              />\r\n              </GridComp>\r\n            ))}\r\n          </GridComp>\r\n          \r\n          </Layout>\r\n        \r\n        </div>\r\n      )\r\n    }\r\n  \r\n  \r\n  \r\n  }\r\n  export default index;\r\n// const index = (props) => {\r\n//     // console.log(props)\r\n//     // CHARCTERS ARRAY\r\n//     const [character, setCharacters] = useState(Characters)\r\n//     // console.log(character)\r\n//     // SCORE\r\n//     const [score, setScore] = useState(0);\r\n//     // console.log(score)\r\n//     // ALERT MESSAGE\r\n//     const [alert, setAlert] = useState('');\r\n//     // console.log(alert)\r\n\r\n//     // METHODS\r\n//     const handlePicked = e => {\r\n//         const name = e.target.attributes.getNamedItem('name').value;\r\n//         console.log(name)\r\n//         shuffleCharacters()\r\n//         //checkGuess takes a name variable that will be used as a JSX prop to the CharCard component\r\n//         // second arg acts as a ...\r\n//         checkGuess(name, updateTopScore)\r\n//         updateTopScore()\r\n//     }\r\n//     const updateTopScore = () => {\r\n        \r\n//       console.log(score)\r\n//       setScore(score+1)\r\n//       console.log(score)\r\n//     }\r\n\r\n//     // * calledback from handlePicked\r\n//     const checkGuess = (name, cb) => {\r\n//         const newState = [...character]\r\n//         console.log(newState)\r\n//         // setAlert(`you picked ${name}`)\r\n//         if (newState.includes(name)) {\r\n//             setAlert(`You already selected ${name.toUpperCase()}!!`)\r\n//             newState = []\r\n//             setCharacters(newState)\r\n//         } else {\r\n//             newState.push(name)\r\n//             setAlert(\"good choice!\")\r\n//         }\r\n//         // console.log(name)\r\n//         // console.log(cb)\r\n//         alertWinner()\r\n//     }\r\n//     console.log(alert)\r\n//     const alertWinner = () => {\r\n//         if (score === 12) {\r\n//             setAlert('holy shit you won!!')\r\n//         }\r\n//     }\r\n//     // * calledback from handlePicked\r\n//     const shuffleCharacters = () => {\r\n//         setCharacters(shuffleArray(character))\r\n//         console.log('STATE')\r\n//         console.log(character)\r\n//         // ** characters shuffle but pics dont shuffle as the data does...\r\n//         console.log('JSON')\r\n//         console.log(Characters)\r\n//     }\r\n//     // * callback from shuffleCharacters\r\n//     const shuffleArray = arr => {\r\n//         let j, x, i;\r\n//         for (i = arr.length - 1; i > 0; i--) {\r\n//             j = Math.floor(Math.random() * (i + 1));\r\n//             x = arr[i];\r\n//             arr[i] = arr[j];\r\n//             arr[j] = x;\r\n//         }\r\n//         return arr\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <Layout>\r\n//                 <GridComp \r\n//                     container \r\n//                     direction='column' \r\n//                     style={{ mrgin: \"0 auto\", maxWidth: 945 }}>\r\n//                         <GridComp item lg={12}>\r\n//                             <PaperComp>\r\n//                                 {alert === \"Good Choice!\" ? (\r\n//                                     <Alert message={alert} style={{ color: 'green' }} />\r\n//                                 ) : (\r\n//                                         <Alert message={alert} style={{ color: 'blue' }} />\r\n//                                     )}\r\n//                             </PaperComp>\r\n//                         </GridComp>\r\n\r\n//                     <GridComp \r\n//                         container \r\n//                         justify=\"space-between\">\r\n//                         <GridComp \r\n//                             item \r\n//                                 lg={6} \r\n//                                 md={6} \r\n//                                 sm={12} \r\n//                                 xs={12} \r\n//                             style={{ padingLeft: '100px', marginLeft: \"101.8px\" }}>\r\n//                             <PaperComp>\r\n//                                 <Score type=\"Score To Win\" Score={character.length} currentScore={score} />\r\n//                             </PaperComp>\r\n//                         </GridComp>\r\n//                     </GridComp>\r\n//                 </GridComp>\r\n\r\n//                 <GridComp container spacing={8} justify='center' style={{ maxWidth: 945, margin: '0 auto' }}>\r\n//                     {character.map(char => (\r\n//                         <CharCard\r\n//                             id={char.id}\r\n//                             key={char.id}\r\n//                             name={char.name}\r\n//                             image={char.image}\r\n//                             handlePicked={handlePicked}\r\n//                         />\r\n//                     ))}\r\n//                 </GridComp>\r\n//             </Layout>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n\r\n\r\n// export default index"]},"metadata":{},"sourceType":"module"}