{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ollep\\\\Documents\\\\clickmeguy\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Characters from '../Characters.json';\nimport Layout from '../components/Layout';\nimport CharCard from '../components/CharCard';\nimport GridComp from '../components/GridComp/';\nimport PaperComp from '../components/PaperComp/';\nimport Alert from '../components/Alert/';\nimport Score from '../components/Score/';\n\nconst index = props => {\n  console.log(props); // CHARCTERS ARRAY\n\n  const {\n    0: character,\n    1: setCharacters\n  } = useState(Characters);\n  console.log(character); // SCORE\n\n  const {\n    0: score,\n    1: setScore\n  } = useState(0);\n  console.log(score); // ALERT MESSAGE\n\n  const {\n    0: alert,\n    1: setAlert\n  } = useState('');\n  console.log(alert); // METHODS\n\n  const handlePicked = e => {\n    const name = e.target.attributes.getNamedItem('name').value;\n    console.log(name);\n    shuffleCharacters();\n    checkGuess(name, updateTopScore);\n  };\n\n  const updateTopScore = currentScore => {\n    switch (currentScore) {\n      case checkGuess = false:\n        setScore(+1);\n\n        if (score >= 12) {\n          setScore();\n        }\n\n        break;\n\n      case checkGuess = true:\n        setScore();\n    }\n\n    console.log(currentScore);\n  }; // * calledback from handlePicked\n\n\n  const checkGuess = (name, cb) => {\n    const newState = [...character];\n    console.log(newState);\n\n    if (newState.includes(name)) {\n      setAlert(`You already selected ${name.toUpderCase()}!!`);\n      console.log(alert);\n    }\n  }; // * calledback from handlePicked\n\n\n  const shuffleCharacters = () => {\n    setCharacters(shuffleArray(character));\n  }; // * callback from shuffleCharacters\n\n\n  const shuffleArray = arr => {\n    let j, x, i;\n\n    for (i = arr.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = arr[i];\n      arr[i] = arr[j];\n      arr[j] = x;\n    }\n\n    return arr;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    container: true,\n    direction: \"column\",\n    style: {\n      mrgin: \"0 auto\",\n      maxWidth: 945\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    item: true,\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(PaperComp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, alert === \"Good Choice!\" ? __jsx(Alert, {\n    message: alert,\n    style: {\n      color: 'green'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }) : __jsx(Alert, {\n    message: alert,\n    style: {\n      color: 'blue'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))), __jsx(GridComp, {\n    container: true,\n    justify: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    item: true,\n    lg: 6,\n    md: 6,\n    sm: 12,\n    xs: 12,\n    style: {\n      padingLeft: '100px',\n      marginLeft: \"101.8px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(PaperComp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(Score, {\n    type: \"Score\",\n    score: character.length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }))))), __jsx(GridComp, {\n    container: true,\n    spacing: 8,\n    justify: \"center\",\n    style: {\n      maxWidth: 945,\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, character.map(char => __jsx(CharCard, {\n    key: char.id,\n    name: char.name,\n    image: char.image,\n    handlePicked: handlePicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })))));\n};\n\nexport default index;","map":{"version":3,"sources":["C:/Users/ollep/Documents/clickmeguy/pages/index.js"],"names":["useState","Characters","Layout","CharCard","GridComp","PaperComp","Alert","Score","index","props","console","log","character","setCharacters","score","setScore","alert","setAlert","handlePicked","e","name","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","currentScore","cb","newState","includes","toUpderCase","shuffleArray","arr","j","x","i","length","Math","floor","random","mrgin","maxWidth","color","padingLeft","marginLeft","margin","map","char","id","image"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport Characters from '../Characters.json'\r\n\r\nimport Layout from '../components/Layout'\r\nimport CharCard from '../components/CharCard'\r\nimport GridComp from '../components/GridComp/'\r\nimport PaperComp from '../components/PaperComp/'\r\nimport Alert from '../components/Alert/'\r\nimport Score from '../components/Score/'\r\n\r\n\r\nconst index = (props) => {\r\n    console.log(props)\r\n    // CHARCTERS ARRAY\r\n    const [character, setCharacters] = useState(Characters)\r\n    console.log(character)\r\n    // SCORE\r\n    const [score, setScore] = useState(0);\r\n    console.log(score)\r\n    // ALERT MESSAGE\r\n    const [alert, setAlert] = useState('');\r\n    console.log(alert)\r\n\r\n    // METHODS\r\n    const handlePicked = e => {\r\n        const name = e.target.attributes.getNamedItem('name').value;\r\n        console.log(name)\r\n        shuffleCharacters()\r\n\r\n        checkGuess(name, updateTopScore)\r\n    }\r\n    const updateTopScore = (currentScore) => {\r\n        switch (currentScore) {\r\n            case checkGuess = false:\r\n                setScore(+1)\r\n                if (score >= 12) {\r\n                    setScore()\r\n                }\r\n                break;\r\n            case checkGuess = true:\r\n                setScore()\r\n        }\r\n        console.log(currentScore)\r\n    }\r\n\r\n    // * calledback from handlePicked\r\n    const checkGuess = (name, cb) => {\r\n        const newState = [...character]\r\n        console.log(newState)\r\n        if (newState.includes(name)) {\r\n            setAlert(`You already selected ${name.toUpderCase()}!!`);\r\n            console.log(alert)\r\n        }\r\n    }\r\n    // * calledback from handlePicked\r\n    const shuffleCharacters = () => {\r\n        setCharacters(shuffleArray(character))\r\n    }\r\n    // * callback from shuffleCharacters\r\n    const shuffleArray = arr => {\r\n        let j, x, i;\r\n        for (i = arr.length - 1; i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            x = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = x;\r\n        }\r\n        return arr\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Layout>\r\n                <GridComp container direction='column' style={{ mrgin: \"0 auto\", maxWidth: 945 }}>\r\n                    <GridComp item lg={12}>\r\n                        <PaperComp>\r\n                            {alert === \"Good Choice!\" ? (\r\n                                <Alert message={alert} style={{ color: 'green' }} />\r\n                            ) : (\r\n                                    <Alert message={alert} style={{ color: 'blue' }} />\r\n                                )}\r\n                        </PaperComp>\r\n                    </GridComp>\r\n\r\n                    <GridComp container justify=\"space-between\">\r\n                        <GridComp item lg={6} md={6} sm={12} xs={12} style={{ padingLeft: '100px', marginLeft: \"101.8px\" }}>\r\n                            <PaperComp>\r\n                                <Score type=\"Score\" score={character.length} />\r\n                            </PaperComp>\r\n                        </GridComp>\r\n                    </GridComp>\r\n                </GridComp>\r\n\r\n                <GridComp container spacing={8} justify='center' style={{ maxWidth: 945, margin: '0 auto' }}>\r\n                    {character.map(char => (\r\n                        <CharCard\r\n                            key={char.id}\r\n                            name={char.name}\r\n                            image={char.image}\r\n                            handlePicked={handlePicked}\r\n                        />\r\n                    ))}\r\n                </GridComp>\r\n            </Layout>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default index"]},"metadata":{},"sourceType":"module"}