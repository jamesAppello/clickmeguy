{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _readOnlyError from \"@babel/runtime-corejs2/helpers/esm/readOnlyError\";\nvar _jsxFileName = \"C:\\\\Users\\\\ollep\\\\Documents\\\\clickmeguy\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Layout from '../components/Layout';\nimport Characters from '../Characters.json';\nimport CharCard from '../components/CharCard';\nimport GridComp from '../components/GridComp/GridComp';\n\nvar index = function index(props) {\n  // console.log(props)\n  // CHARCTERS ARRAY\n  var _useState = useState(Characters),\n      character = _useState[0],\n      setCharacters = _useState[1];\n\n  console.log(character); // SCORE\n\n  var _useState2 = useState(0),\n      score = _useState2[0],\n      setScore = _useState2[1]; // ALERT MESSAGE\n\n\n  var _useState3 = useState(''),\n      alert = _useState3[0],\n      setAlert = _useState3[1]; // METHODS\n\n\n  var handlePicked = function handlePicked(e) {\n    var name = e.target.attributes.getNamedItem('name').value;\n    console.log(name);\n    shuffleCharacters();\n    checkGuess(name, updateTopScore);\n  };\n\n  var updateTopScore = function updateTopScore(currentScore) {\n    switch (currentScore) {\n      case checkGuess = (_readOnlyError(\"checkGuess\"), false):\n        setScore(+1);\n\n        if (score >= 12) {\n          setScore();\n        }\n\n        break;\n\n      case checkGuess = (_readOnlyError(\"checkGuess\"), true):\n        setScore();\n    }\n\n    console.log(currentScore);\n  }; // * calledback from handlePicked\n\n\n  var checkGuess = function checkGuess(name, cb) {\n    var newState = _toConsumableArray(character);\n\n    console.log(newState);\n\n    if (newState.includes(name)) {\n      setAlert(\"You already selected \".concat(name.toUpderCase(), \"!!\"));\n      console.log(alert);\n    }\n  }; // * calledback from handlePicked\n\n\n  var shuffleCharacters = function shuffleCharacters() {\n    setCharacters(shuffleArray(character));\n  }; // * callback from shuffleCharacters\n\n\n  var shuffleArray = function shuffleArray(arr) {\n    var j, x, i;\n\n    for (i = arr.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = arr[i];\n      arr[i] = arr[j];\n      arr[j] = x;\n    }\n\n    return arr;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    container: true,\n    direction: \"column\",\n    style: {\n      mrgin: \"0 auto\",\n      maxWidth: 945\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(GridComp, {\n    item: true,\n    lg: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(GridComp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))));\n}; // index.getInitialProps = async function\n\n\nexport default index;","map":{"version":3,"sources":["C:/Users/ollep/Documents/clickmeguy/pages/index.js"],"names":["useState","Layout","Characters","CharCard","GridComp","index","props","character","setCharacters","console","log","score","setScore","alert","setAlert","handlePicked","e","name","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","currentScore","cb","newState","includes","toUpderCase","shuffleArray","arr","j","x","i","length","Math","floor","random","mrgin","maxWidth"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\n\r\nimport Layout from '../components/Layout'\r\nimport Characters from '../Characters.json'\r\nimport CharCard from '../components/CharCard'\r\nimport GridComp from '../components/GridComp/GridComp'\r\n\r\n\r\nconst index = (props) => {\r\n    // console.log(props)\r\n    // CHARCTERS ARRAY\r\n    const [character, setCharacters] = useState(Characters)\r\n    console.log(character)\r\n    // SCORE\r\n    const [score, setScore] = useState(0);\r\n    // ALERT MESSAGE\r\n    const [alert, setAlert] = useState('');\r\n\r\n    // METHODS\r\n    const handlePicked = e => {\r\n        const name = e.target.attributes.getNamedItem('name').value;\r\n        console.log(name)\r\n        shuffleCharacters()\r\n       \r\n        checkGuess(name, updateTopScore)\r\n    }\r\n    const updateTopScore = (currentScore) => {\r\n        switch(currentScore) {\r\n            case checkGuess = false:\r\n                    setScore(+1)\r\n                    if (score >=12) {\r\n                        setScore()\r\n                    }\r\n                break;\r\n            case checkGuess = true:\r\n                    setScore()        \r\n        }\r\n        console.log(currentScore)\r\n    }\r\n\r\n    // * calledback from handlePicked\r\n    const checkGuess = (name, cb) => {\r\n        const newState = [...character]\r\n        console.log(newState)\r\n        if (newState.includes(name)) {\r\n            setAlert(`You already selected ${name.toUpderCase()}!!`);\r\n            console.log(alert)\r\n        }\r\n    }\r\n    // * calledback from handlePicked\r\n    const shuffleCharacters = () => {\r\n        setCharacters(shuffleArray(character))\r\n    }\r\n    // * callback from shuffleCharacters\r\n    const shuffleArray = arr => {\r\n        let j, x, i;\r\n        for (i = arr.length -1; i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            x = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = x;\r\n        }\r\n        return arr\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Layout>\r\n            <GridComp container direction='column' style={{ mrgin: \"0 auto\", maxWidth: 945 }}>\r\n                <GridComp item lg={12}>\r\n\r\n                </GridComp>\r\n                <GridComp>\r\n\r\n                </GridComp>\r\n            </GridComp>\r\n        \r\n        {/* <div className=\"container Holder\" style={{ \r\n            textAlign:'center',\r\n            backgroundColor:'lightgrey',\r\n            borderRadius:10.1618,\r\n            margin:'0 auto',\r\n            maxWidth:945 \r\n        }}> */}\r\n            {/* <h1>{alert}</h1> */}\r\n            {/* <div className=\"row\"> */}\r\n                {/* CHARACTERS */}\r\n                {/* {character.map(char => (\r\n                    <CharCard \r\n                        key={char.id}\r\n                        name={char.name}\r\n                        image={char.image}\r\n                        handlePicked={handlePicked}\r\n                    />\r\n                ))} */}\r\n                \r\n            {/* </div> */}\r\n            \r\n            \r\n        {/* </div> */}\r\n        </Layout>\r\n        </>\r\n    );\r\n};\r\n\r\n// index.getInitialProps = async function\r\n\r\nexport default index"]},"metadata":{},"sourceType":"module"}