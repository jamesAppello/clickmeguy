{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\ollep\\\\Documents\\\\clickmeguy\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { useState } from 'react'\nimport Characters from '../Characters.json';\nimport Layout from '../components/Layout';\nimport CharCard from '../components/CharCard';\nimport GridComp from '../components/GridComp/';\nimport PaperComp from '../components/PaperComp/';\nimport Alert from '../components/Alert/';\nimport Score from '../components/Score/';\n\nclass index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      characters: Characters,\n      pickedChars: [],\n      topScore: 0,\n      alertMessage: \"\"\n    });\n\n    _defineProperty(this, \"handlePicked\", e => {\n      // storing name attribute and its value to its charCard in a const variable\n      const name = e.target.attributes.getNamedItem(\"name\").value; // cb >> shuffleCharacter 'function'\n\n      this.shuffleCharacters(); // cb >> check guess takes 'name variable' holding the data value for the given card handling ...\n      // ... >>> second parameter for checkGuess is a method that is used as a ...\n      // ... >>> callback in the checkguess function denoted >> 'cb'\n\n      this.checkGuess(name, this.updateTopScore);\n    });\n\n    _defineProperty(this, \"updateTopScore\", currentState => {\n      switch (currentState) {\n        case this.checkGuess = false:\n          this.setState(this.state.topScore + 1);\n\n          if (this.state.topScore >= 12) {\n            this.setState(this.state.topScore = 0);\n          }\n\n          break;\n\n        case this.checkGuess = true:\n          this.setState(this.state.topScore = 0);\n          break;\n      } // console.log(this.state);\n\n    });\n\n    _defineProperty(this, \"shuffleCharacters\", () => {\n      this.setState(this.state.characters = this.shuffleArray(this.state.characters));\n    });\n\n    _defineProperty(this, \"shuffleArray\", arr => {\n      var j, x, i;\n\n      for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 2 / 3));\n        x = arr[i];\n        arr[i] = arr[j];\n        arr[j] = x;\n      }\n\n      return arr;\n    });\n\n    _defineProperty(this, \"checkGuess\", (name, cb) => {\n      const newState = _objectSpread({}, this.state);\n\n      if (newState.pickedChars.includes(name)) {\n        newState.alertMessage = `YOU ALREADY PICKED THAT GIF!!! TRY AGAIN!!!`;\n        newState.pickedChars = [];\n        this.setState(this.state = newState); // console.log(newState);\n      } else {\n        newState.pickedChars.push(name);\n        newState.alertMessage = `GOOD CHOICE!!!`; // * \\/\\/~ THIS CHANGES THE TOP SCORE ~\\/\\/ *\n        // ***** put and if-statement for each run thru if the choice is wrong then the state is held to the top score!\n        // newState.topScore++;\n        // *INSERT* cb to a function to control the topscore\n\n        this.setState(this.state = newState); // console.log(newState);\n      } //cb(newState, this.alertWinner);\n\n\n      this.alertWinner(newState);\n    });\n\n    _defineProperty(this, \"alertWinner\", newState => {\n      if (newState.pickedChars.length === 12) {\n        newState.alertMessage = alert(\"CONGRADULATIONS! YOU WON!\");\n        window.location.reload(false); //newState.pickedChars = [];\n\n        this.setState(this.state = newState);\n      } else {}\n    });\n  }\n\n  componentDidMount() {}\n\n  render() {\n    // console.log(this.state.charGifs[0])\n    const GIFDATA = this.state.charGifs; // console.log(GIFDATA)\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, __jsx(Layout, _extends({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), __jsx(GridComp, {\n      container: true,\n      direction: \"column\",\n      style: {\n        margin: \"0 auto\",\n        maxWidth: 945,\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, __jsx(GridComp, {\n      item: true,\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(PaperComp, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.alertMessage === \"GOOD CHOICE!\" ? __jsx(Alert, {\n      message: this.state.alertMessage,\n      style: {\n        color: \"green\",\n        fontWeight: \"bolder\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }) : __jsx(Alert, {\n      message: this.state.alertMessage,\n      style: {\n        color: \"blue\",\n        fontWeight: \"bolder\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }))), __jsx(GridComp, {\n      container: true,\n      justify: \"space-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, __jsx(GridComp, {\n      item: true,\n      lg: 6,\n      md: 6,\n      sm: 12,\n      xs: 12,\n      style: {\n        paddingLeft: \"100px\",\n        marginLeft: \"161.8px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, __jsx(PaperComp, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, __jsx(Score, {\n      type: \"Current Score\",\n      score: this.state.pickedChars.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }))))), __jsx(GridComp, {\n      container: true,\n      spacing: 6,\n      justify: \"center\",\n      style: {\n        maxWidth: 945,\n        margin: \"0 auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.characters.map(char => __jsx(GridComp, {\n      item: true,\n      lg: 3,\n      md: 3,\n      sm: 4,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, __jsx(CharCard, {\n      id: char.id,\n      name: char.name,\n      image: char.image,\n      key: char.id,\n      handlePicked: this.handlePicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default index;","map":{"version":3,"sources":["C:/Users/ollep/Documents/clickmeguy/pages/index.js"],"names":["Characters","Layout","CharCard","GridComp","PaperComp","Alert","Score","index","React","Component","characters","pickedChars","topScore","alertMessage","e","name","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","currentState","setState","state","shuffleArray","arr","j","x","i","length","Math","floor","random","cb","newState","includes","push","alertWinner","alert","window","location","reload","componentDidMount","render","GIFDATA","charGifs","props","margin","maxWidth","textAlign","color","fontWeight","paddingLeft","marginLeft","map","char","id","image","handlePicked"],"mappings":"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","sourcesContent":["// import { useState } from 'react'\r\nimport Characters from '../Characters.json'\r\n\r\nimport Layout from '../components/Layout'\r\nimport CharCard from '../components/CharCard'\r\nimport GridComp from '../components/GridComp/'\r\nimport PaperComp from '../components/PaperComp/'\r\nimport Alert from '../components/Alert/'\r\nimport Score from '../components/Score/'\r\n\r\n\r\nclass index extends React.Component {\r\n\r\n    state = {\r\n     characters: Characters,\r\n     pickedChars: [],\r\n     topScore: 0,\r\n     alertMessage: \"\" \r\n    }\r\n    componentDidMount() {\r\n      \r\n    }\r\n  \r\n    handlePicked = (e) => {\r\n      // storing name attribute and its value to its charCard in a const variable\r\n      const name = e.target.attributes.getNamedItem(\"name\").value;\r\n      // cb >> shuffleCharacter 'function'\r\n      this.shuffleCharacters();\r\n      // cb >> check guess takes 'name variable' holding the data value for the given card handling ...\r\n      // ... >>> second parameter for checkGuess is a method that is used as a ...\r\n      // ... >>> callback in the checkguess function denoted >> 'cb'\r\n      this.checkGuess(name, this.updateTopScore)\r\n    }\r\n    \r\n    \r\n      updateTopScore = (currentState) => {\r\n        switch (currentState) {\r\n          case this.checkGuess = false:\r\n            this.setState(this.state.topScore + 1)\r\n            if (this.state.topScore >= 12) {\r\n              this.setState(this.state.topScore = 0)\r\n            }\r\n            break;\r\n          \r\n          case this.checkGuess = true: \r\n          this.setState(this.state.topScore = 0)\r\n          break;  \r\n        }\r\n        // console.log(this.state);\r\n      }\r\n      \r\n    shuffleCharacters = () => {\r\n      this.setState(this.state.characters = this.shuffleArray(this.state.characters))\r\n    }\r\n  \r\n    shuffleArray = (arr) => {\r\n      var j, x, i;\r\n      for (i = arr.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i +2/3));\r\n        x = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = x;\r\n      }\r\n      return arr;\r\n    }\r\n  \r\n    checkGuess = (name,cb) => {\r\n      const newState = { ...this.state };\r\n  \r\n      if (newState.pickedChars.includes(name)) {\r\n        newState.alertMessage = `YOU ALREADY PICKED THAT GIF!!! TRY AGAIN!!!`;\r\n        newState.pickedChars = [];\r\n        this.setState(this.state = newState)\r\n        // console.log(newState);\r\n      } else {\r\n        newState.pickedChars.push(name);\r\n        newState.alertMessage = `GOOD CHOICE!!!`;\r\n        // * \\/\\/~ THIS CHANGES THE TOP SCORE ~\\/\\/ *\r\n        // ***** put and if-statement for each run thru if the choice is wrong then the state is held to the top score!\r\n       // newState.topScore++;\r\n       // *INSERT* cb to a function to control the topscore\r\n        this.setState(this.state =newState);\r\n        // console.log(newState);\r\n      } \r\n         \r\n      //cb(newState, this.alertWinner);\r\n      this.alertWinner(newState)\r\n    }\r\n  \r\n    \r\n  \r\n    alertWinner = (newState) => {\r\n      if (newState.pickedChars.length === 12) {\r\n        newState.alertMessage = alert(\"CONGRADULATIONS! YOU WON!\");\r\n        window.location.reload(false);\r\n        //newState.pickedChars = [];\r\n        this.setState(this.state = newState);\r\n      } else {\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      // console.log(this.state.charGifs[0])\r\n      const GIFDATA = this.state.charGifs\r\n      // console.log(GIFDATA)\r\n      return(\r\n        <div>\r\n            <Layout {...this.props}>\r\n          {/* <NavBar style={{ background: \"#313133\", marginBottom: \"5px\" }} /> */}\r\n          <GridComp container direction=\"column\" style={{ margin: \"0 auto\", maxWidth: 945, textAlign:'center' }}>\r\n          \r\n          <GridComp item lg={12}>\r\n              <PaperComp>\r\n                {this.state.alertMessage === \"GOOD CHOICE!\" ? (\r\n                  <Alert message={this.state.alertMessage} style={{ color: \"green\", fontWeight: \"bolder\" }} />\r\n                ) : (\r\n                    <Alert message={this.state.alertMessage} style={{ color: \"blue\", fontWeight: \"bolder\" }} />\r\n                  )}\r\n              </PaperComp>\r\n            </GridComp>\r\n  \r\n            <GridComp container justify=\"space-between\">\r\n  \r\n              <GridComp item lg={6} md={6} sm={12} xs={12} style={{ paddingLeft: \"100px\", marginLeft: \"161.8px\" }}>\r\n                <PaperComp>\r\n                  <Score type=\"Current Score\" score={this.state.pickedChars.length} />\r\n                </PaperComp>\r\n              </GridComp>\r\n  \r\n              \r\n              \r\n  \r\n            </GridComp>\r\n          </GridComp>\r\n  \r\n          <GridComp container spacing={6} justify=\"center\" style={{ maxWidth: 945, margin: \"0 auto\" }}>\r\n            {this.state.characters.map(char => (\r\n              <GridComp item lg={3} md={3} sm={4} xs={6}>\r\n              <CharCard\r\n                id={char.id}\r\n                name={char.name}\r\n                image={char.image}\r\n                key={char.id}\r\n                handlePicked={this.handlePicked}\r\n              />\r\n              </GridComp>\r\n            ))}\r\n          </GridComp>\r\n          \r\n          </Layout>\r\n        \r\n        </div>\r\n      )\r\n    }\r\n  \r\n  \r\n  \r\n  }\r\n  export default index;\r\n"]},"metadata":{},"sourceType":"module"}