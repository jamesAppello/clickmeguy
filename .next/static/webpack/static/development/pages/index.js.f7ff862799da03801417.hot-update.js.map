{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.f7ff862799da03801417.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["// import { useState } from 'react'\r\nimport Characters from '../Characters.json'\r\n\r\nimport Layout from '../components/Layout'\r\nimport CharCard from '../components/CharCard'\r\nimport GridComp from '../components/GridComp/'\r\nimport PaperComp from '../components/PaperComp/'\r\nimport Alert from '../components/Alert/'\r\nimport Score from '../components/Score/'\r\nimport GifCard from '../components/GifCard/GifCard.js'\r\n\r\nconsole.log(Layout.props.testProp.gifs)\r\nconst GIFS = Layout.props.testProp.gifs\r\n\r\n\r\nclass index extends React.Component {\r\n\r\n    state = {\r\n     charGifs: [], \r\n     characters: Characters,\r\n     pickedChars: [],\r\n     topScore: 0,\r\n     alertMessage: \"\" \r\n    }\r\n    componentDidMount() {\r\n      let layout = Layout.props.testProp.gifs\r\n      console.log(layout)\r\n     const GifyCards = layout.map((itr, i) => {\r\n        console.log(itr[0].images.downsized_large.url)\r\n        return(\r\n          <GifCard key={itr.id} gif={itr[i].images.downsized_large.url} />\r\n        )\r\n      })\r\n      console.log(GifyCards)\r\n      \r\n    }\r\n  \r\n    handlePicked = (e) => {\r\n      // storing name attribute and its value to its charCard in a const variable\r\n      const name = e.target.attributes.getNamedItem(\"name\").value;\r\n      // cb >> shuffleCharacter 'function'\r\n      this.shuffleCharacters();\r\n      // cb >> check guess takes 'name variable' holding the data value for the given card handling ...\r\n      // ... >>> second parameter for checkGuess is a method that is used as a ...\r\n      // ... >>> callback in the checkguess function denoted >> 'cb'\r\n      this.checkGuess(name, this.updateTopScore)\r\n    }\r\n    \r\n    \r\n      updateTopScore = (currentState) => {\r\n        switch (currentState) {\r\n          case this.checkGuess = false:\r\n            this.setState(this.state.topScore + 1)\r\n            if (this.state.topScore >= 12) {\r\n              this.setState(this.state.topScore = 0)\r\n            }\r\n            break;\r\n          \r\n          case this.checkGuess = true: \r\n          this.setState(this.state.topScore = 0)\r\n          break;  \r\n        }\r\n        // console.log(this.state);\r\n      }\r\n      \r\n    shuffleCharacters = () => {\r\n      this.setState(this.state.characters = this.shuffleArray(this.state.characters))\r\n    }\r\n  \r\n    shuffleArray = (arr) => {\r\n      var j, x, i;\r\n      for (i = arr.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i +1));\r\n        x = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = x;\r\n      }\r\n      return arr;\r\n    }\r\n  \r\n    checkGuess = (name,cb) => {\r\n      const newState = { ...this.state };\r\n  \r\n      if (newState.pickedChars.includes(name)) {\r\n        newState.alertMessage = `YOU ALREADY PICKED \"${name.toUpperCase()}\" TRY AGAIN!!!`;\r\n        newState.pickedChars = [];\r\n        this.setState(this.state = newState)\r\n        // console.log(newState);\r\n      } else {\r\n        newState.pickedChars.push(name);\r\n        newState.alertMessage = `GOOD CHOICE!!!`;\r\n        // * \\/\\/~ THIS CHANGES THE TOP SCORE ~\\/\\/ *\r\n        // ***** put and if-statement for each run thru if the choice is wrong then the state is held to the top score!\r\n       // newState.topScore++;\r\n       // *INSERT* cb to a function to control the topscore\r\n        this.setState(this.state =newState);\r\n        // console.log(newState);\r\n      } \r\n         \r\n      //cb(newState, this.alertWinner);\r\n      this.alertWinner(newState)\r\n    }\r\n  \r\n    \r\n  \r\n    alertWinner = (newState) => {\r\n      if (newState.pickedChars.length === 12) {\r\n        newState.alertMessage = alert(\"CONGRADULATIONS! YOU WON!\");\r\n        //newState.pickedChars = [];\r\n        this.setState(this.state = newState);\r\n      } else {\r\n\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      return(\r\n        <div>\r\n            <Layout {...this.props}>\r\n          {/* <NavBar style={{ background: \"#313133\", marginBottom: \"5px\" }} /> */}\r\n          <GridComp container direction=\"column\" style={{ margin: \"0 auto\", maxWidth: 945, textAlign:'center' }}>\r\n          \r\n          <GridComp item lg={12}>\r\n              <PaperComp>\r\n                {this.state.alertMessage === \"GOOD CHOICE!\" ? (\r\n                  <Alert message={this.state.alertMessage} style={{ color: \"green\", fontWeight: \"bolder\" }} />\r\n                ) : (\r\n                    <Alert message={this.state.alertMessage} style={{ color: \"blue\", fontWeight: \"bolder\" }} />\r\n                  )}\r\n              </PaperComp>\r\n            </GridComp>\r\n  \r\n            <GridComp container justify=\"space-between\">\r\n  \r\n              <GridComp item lg={6} md={6} sm={12} xs={12} style={{ paddingLeft: \"100px\", marginLeft: \"161.8px\" }}>\r\n                <PaperComp>\r\n                  <Score type=\"Current Score\" score={this.state.pickedChars.length} />\r\n                </PaperComp>\r\n              </GridComp>\r\n  \r\n              \r\n              \r\n  \r\n            </GridComp>\r\n          </GridComp>\r\n  \r\n          <GridComp container spacing={6} justify=\"center\" style={{ maxWidth: 945, margin: \"0 auto\" }}>\r\n            {this.state.characters.map(char => (\r\n              <GridComp item lg={3} md={3} sm={4} xs={6}>\r\n              <CharCard\r\n                id={char.id}\r\n                name={char.name}\r\n                image={char.image}\r\n                key={char.id}\r\n                handlePicked={this.handlePicked}\r\n              />\r\n              </GridComp>\r\n            ))}\r\n          </GridComp>\r\n          </Layout>\r\n        \r\n        </div>\r\n      )\r\n    }\r\n  \r\n  \r\n  \r\n  }\r\n  export default index;\r\n// const index = (props) => {\r\n//     // console.log(props)\r\n//     // CHARCTERS ARRAY\r\n//     const [character, setCharacters] = useState(Characters)\r\n//     // console.log(character)\r\n//     // SCORE\r\n//     const [score, setScore] = useState(0);\r\n//     // console.log(score)\r\n//     // ALERT MESSAGE\r\n//     const [alert, setAlert] = useState('');\r\n//     // console.log(alert)\r\n\r\n//     // METHODS\r\n//     const handlePicked = e => {\r\n//         const name = e.target.attributes.getNamedItem('name').value;\r\n//         console.log(name)\r\n//         shuffleCharacters()\r\n//         //checkGuess takes a name variable that will be used as a JSX prop to the CharCard component\r\n//         // second arg acts as a ...\r\n//         checkGuess(name, updateTopScore)\r\n//         updateTopScore()\r\n//     }\r\n//     const updateTopScore = () => {\r\n        \r\n//       console.log(score)\r\n//       setScore(score+1)\r\n//       console.log(score)\r\n//     }\r\n\r\n//     // * calledback from handlePicked\r\n//     const checkGuess = (name, cb) => {\r\n//         const newState = [...character]\r\n//         console.log(newState)\r\n//         // setAlert(`you picked ${name}`)\r\n//         if (newState.includes(name)) {\r\n//             setAlert(`You already selected ${name.toUpperCase()}!!`)\r\n//             newState = []\r\n//             setCharacters(newState)\r\n//         } else {\r\n//             newState.push(name)\r\n//             setAlert(\"good choice!\")\r\n//         }\r\n//         // console.log(name)\r\n//         // console.log(cb)\r\n//         alertWinner()\r\n//     }\r\n//     console.log(alert)\r\n//     const alertWinner = () => {\r\n//         if (score === 12) {\r\n//             setAlert('holy shit you won!!')\r\n//         }\r\n//     }\r\n//     // * calledback from handlePicked\r\n//     const shuffleCharacters = () => {\r\n//         setCharacters(shuffleArray(character))\r\n//         console.log('STATE')\r\n//         console.log(character)\r\n//         // ** characters shuffle but pics dont shuffle as the data does...\r\n//         console.log('JSON')\r\n//         console.log(Characters)\r\n//     }\r\n//     // * callback from shuffleCharacters\r\n//     const shuffleArray = arr => {\r\n//         let j, x, i;\r\n//         for (i = arr.length - 1; i > 0; i--) {\r\n//             j = Math.floor(Math.random() * (i + 1));\r\n//             x = arr[i];\r\n//             arr[i] = arr[j];\r\n//             arr[j] = x;\r\n//         }\r\n//         return arr\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <Layout>\r\n//                 <GridComp \r\n//                     container \r\n//                     direction='column' \r\n//                     style={{ mrgin: \"0 auto\", maxWidth: 945 }}>\r\n//                         <GridComp item lg={12}>\r\n//                             <PaperComp>\r\n//                                 {alert === \"Good Choice!\" ? (\r\n//                                     <Alert message={alert} style={{ color: 'green' }} />\r\n//                                 ) : (\r\n//                                         <Alert message={alert} style={{ color: 'blue' }} />\r\n//                                     )}\r\n//                             </PaperComp>\r\n//                         </GridComp>\r\n\r\n//                     <GridComp \r\n//                         container \r\n//                         justify=\"space-between\">\r\n//                         <GridComp \r\n//                             item \r\n//                                 lg={6} \r\n//                                 md={6} \r\n//                                 sm={12} \r\n//                                 xs={12} \r\n//                             style={{ padingLeft: '100px', marginLeft: \"101.8px\" }}>\r\n//                             <PaperComp>\r\n//                                 <Score type=\"Score To Win\" Score={character.length} currentScore={score} />\r\n//                             </PaperComp>\r\n//                         </GridComp>\r\n//                     </GridComp>\r\n//                 </GridComp>\r\n\r\n//                 <GridComp container spacing={8} justify='center' style={{ maxWidth: 945, margin: '0 auto' }}>\r\n//                     {character.map(char => (\r\n//                         <CharCard\r\n//                             id={char.id}\r\n//                             key={char.id}\r\n//                             name={char.name}\r\n//                             image={char.image}\r\n//                             handlePicked={handlePicked}\r\n//                         />\r\n//                     ))}\r\n//                 </GridComp>\r\n//             </Layout>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n\r\n\r\n// export default index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAmBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;AA1FA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;;AAggBA;;;;AApJA;AACA;AAwsourceRoot":""}